# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from datetime import datetime

from pydantic import Field, StrictBool, StrictBytes, StrictFloat, StrictInt, StrictStr

from typing import List, Optional, Union

from openapi_client.models.asset_bulk_delete_dto import AssetBulkDeleteDto
from openapi_client.models.asset_bulk_update_dto import AssetBulkUpdateDto
from openapi_client.models.asset_bulk_upload_check_dto import AssetBulkUploadCheckDto
from openapi_client.models.asset_bulk_upload_check_response_dto import AssetBulkUploadCheckResponseDto
from openapi_client.models.asset_file_upload_response_dto import AssetFileUploadResponseDto
from openapi_client.models.asset_ids_dto import AssetIdsDto
from openapi_client.models.asset_jobs_dto import AssetJobsDto
from openapi_client.models.asset_order import AssetOrder
from openapi_client.models.asset_response_dto import AssetResponseDto
from openapi_client.models.asset_stats_response_dto import AssetStatsResponseDto
from openapi_client.models.asset_type_enum import AssetTypeEnum
from openapi_client.models.bulk_ids_dto import BulkIdsDto
from openapi_client.models.check_existing_assets_dto import CheckExistingAssetsDto
from openapi_client.models.check_existing_assets_response_dto import CheckExistingAssetsResponseDto
from openapi_client.models.curated_locations_response_dto import CuratedLocationsResponseDto
from openapi_client.models.curated_objects_response_dto import CuratedObjectsResponseDto
from openapi_client.models.download_info_dto import DownloadInfoDto
from openapi_client.models.download_response_dto import DownloadResponseDto
from openapi_client.models.map_marker_response_dto import MapMarkerResponseDto
from openapi_client.models.memory_lane_response_dto import MemoryLaneResponseDto
from openapi_client.models.thumbnail_format import ThumbnailFormat
from openapi_client.models.time_bucket_response_dto import TimeBucketResponseDto
from openapi_client.models.time_bucket_size import TimeBucketSize
from openapi_client.models.update_asset_dto import UpdateAssetDto
from openapi_client.models.update_stack_parent_dto import UpdateStackParentDto

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class AssetApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def check_bulk_upload(self, asset_bulk_upload_check_dto : AssetBulkUploadCheckDto, **kwargs) -> AssetBulkUploadCheckResponseDto:  # noqa: E501
        """check_bulk_upload  # noqa: E501

        Checks if assets exist by checksums  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_bulk_upload(asset_bulk_upload_check_dto, async_req=True)
        >>> result = thread.get()

        :param asset_bulk_upload_check_dto: (required)
        :type asset_bulk_upload_check_dto: AssetBulkUploadCheckDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetBulkUploadCheckResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the check_bulk_upload_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.check_bulk_upload_with_http_info(asset_bulk_upload_check_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def check_bulk_upload_with_http_info(self, asset_bulk_upload_check_dto : AssetBulkUploadCheckDto, **kwargs) -> ApiResponse:  # noqa: E501
        """check_bulk_upload  # noqa: E501

        Checks if assets exist by checksums  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_bulk_upload_with_http_info(asset_bulk_upload_check_dto, async_req=True)
        >>> result = thread.get()

        :param asset_bulk_upload_check_dto: (required)
        :type asset_bulk_upload_check_dto: AssetBulkUploadCheckDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetBulkUploadCheckResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'asset_bulk_upload_check_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_bulk_upload" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_bulk_upload_check_dto'] is not None:
            _body_params = _params['asset_bulk_upload_check_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "AssetBulkUploadCheckResponseDto",
        }

        return self.api_client.call_api(
            '/asset/bulk-upload-check', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def check_existing_assets(self, check_existing_assets_dto : CheckExistingAssetsDto, **kwargs) -> CheckExistingAssetsResponseDto:  # noqa: E501
        """check_existing_assets  # noqa: E501

        Checks if multiple assets exist on the server and returns all existing - used by background backup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_existing_assets(check_existing_assets_dto, async_req=True)
        >>> result = thread.get()

        :param check_existing_assets_dto: (required)
        :type check_existing_assets_dto: CheckExistingAssetsDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CheckExistingAssetsResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the check_existing_assets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.check_existing_assets_with_http_info(check_existing_assets_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def check_existing_assets_with_http_info(self, check_existing_assets_dto : CheckExistingAssetsDto, **kwargs) -> ApiResponse:  # noqa: E501
        """check_existing_assets  # noqa: E501

        Checks if multiple assets exist on the server and returns all existing - used by background backup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_existing_assets_with_http_info(check_existing_assets_dto, async_req=True)
        >>> result = thread.get()

        :param check_existing_assets_dto: (required)
        :type check_existing_assets_dto: CheckExistingAssetsDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CheckExistingAssetsResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'check_existing_assets_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_existing_assets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['check_existing_assets_dto'] is not None:
            _body_params = _params['check_existing_assets_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "CheckExistingAssetsResponseDto",
        }

        return self.api_client.call_api(
            '/asset/exist', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_assets(self, asset_bulk_delete_dto : AssetBulkDeleteDto, **kwargs) -> None:  # noqa: E501
        """delete_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_assets(asset_bulk_delete_dto, async_req=True)
        >>> result = thread.get()

        :param asset_bulk_delete_dto: (required)
        :type asset_bulk_delete_dto: AssetBulkDeleteDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_assets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_assets_with_http_info(asset_bulk_delete_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_assets_with_http_info(self, asset_bulk_delete_dto : AssetBulkDeleteDto, **kwargs) -> ApiResponse:  # noqa: E501
        """delete_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_assets_with_http_info(asset_bulk_delete_dto, async_req=True)
        >>> result = thread.get()

        :param asset_bulk_delete_dto: (required)
        :type asset_bulk_delete_dto: AssetBulkDeleteDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'asset_bulk_delete_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_assets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_bulk_delete_dto'] is not None:
            _body_params = _params['asset_bulk_delete_dto']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def download_archive_old(self, asset_ids_dto : AssetIdsDto, key : Optional[StrictStr] = None, **kwargs) -> bytearray:  # noqa: E501
        """download_archive_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_archive_old(asset_ids_dto, key, async_req=True)
        >>> result = thread.get()

        :param asset_ids_dto: (required)
        :type asset_ids_dto: AssetIdsDto
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_archive_old_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_archive_old_with_http_info(asset_ids_dto, key, **kwargs)  # noqa: E501

    @validate_arguments
    def download_archive_old_with_http_info(self, asset_ids_dto : AssetIdsDto, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """download_archive_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_archive_old_with_http_info(asset_ids_dto, key, async_req=True)
        >>> result = thread.get()

        :param asset_ids_dto: (required)
        :type asset_ids_dto: AssetIdsDto
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'asset_ids_dto',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_archive_old" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_ids_dto'] is not None:
            _body_params = _params['asset_ids_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/asset/download/archive', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def download_file_old(self, id : StrictStr, key : Optional[StrictStr] = None, **kwargs) -> bytearray:  # noqa: E501
        """download_file_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_file_old(id, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_file_old_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_file_old_with_http_info(id, key, **kwargs)  # noqa: E501

    @validate_arguments
    def download_file_old_with_http_info(self, id : StrictStr, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """download_file_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_file_old_with_http_info(id, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_old" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/asset/download/{id}', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def empty_trash_old(self, **kwargs) -> None:  # noqa: E501
        """empty_trash_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.empty_trash_old(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the empty_trash_old_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.empty_trash_old_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def empty_trash_old_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """empty_trash_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.empty_trash_old_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method empty_trash_old" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset/trash/empty', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_all_assets(self, if_none_match : Annotated[Optional[StrictStr], Field(description="ETag of data already cached on the client")] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, skip : Optional[StrictInt] = None, take : Optional[StrictInt] = None, updated_after : Optional[datetime] = None, updated_before : Optional[datetime] = None, user_id : Optional[StrictStr] = None, **kwargs) -> List[AssetResponseDto]:  # noqa: E501
        """get_all_assets  # noqa: E501

        Get all AssetEntity belong to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_assets(if_none_match, is_archived, is_favorite, skip, take, updated_after, updated_before, user_id, async_req=True)
        >>> result = thread.get()

        :param if_none_match: ETag of data already cached on the client
        :type if_none_match: str
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param updated_after:
        :type updated_after: datetime
        :param updated_before:
        :type updated_before: datetime
        :param user_id:
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AssetResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_assets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_all_assets_with_http_info(if_none_match, is_archived, is_favorite, skip, take, updated_after, updated_before, user_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_all_assets_with_http_info(self, if_none_match : Annotated[Optional[StrictStr], Field(description="ETag of data already cached on the client")] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, skip : Optional[StrictInt] = None, take : Optional[StrictInt] = None, updated_after : Optional[datetime] = None, updated_before : Optional[datetime] = None, user_id : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_all_assets  # noqa: E501

        Get all AssetEntity belong to the user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_assets_with_http_info(if_none_match, is_archived, is_favorite, skip, take, updated_after, updated_before, user_id, async_req=True)
        >>> result = thread.get()

        :param if_none_match: ETag of data already cached on the client
        :type if_none_match: str
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param skip:
        :type skip: int
        :param take:
        :type take: int
        :param updated_after:
        :type updated_after: datetime
        :param updated_before:
        :type updated_before: datetime
        :param user_id:
        :type user_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AssetResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'if_none_match',
            'is_archived',
            'is_favorite',
            'skip',
            'take',
            'updated_after',
            'updated_before',
            'user_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_assets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        if _params.get('skip') is not None:  # noqa: E501
            _query_params.append(('skip', _params['skip']))

        if _params.get('take') is not None:  # noqa: E501
            _query_params.append(('take', _params['take']))

        if _params.get('updated_after') is not None:  # noqa: E501
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(('updatedAfter', _params['updated_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updatedAfter', _params['updated_after']))

        if _params.get('updated_before') is not None:  # noqa: E501
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(('updatedBefore', _params['updated_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updatedBefore', _params['updated_before']))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['if_none_match']:
            _header_params['if-none-match'] = _params['if_none_match']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[AssetResponseDto]",
        }

        return self.api_client.call_api(
            '/asset', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_all_user_assets_by_device_id(self, device_id : StrictStr, **kwargs) -> List[str]:  # noqa: E501
        """get_all_user_assets_by_device_id  # noqa: E501

        Get all asset of a device that are in the database, ID only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_user_assets_by_device_id(device_id, async_req=True)
        >>> result = thread.get()

        :param device_id: (required)
        :type device_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_all_user_assets_by_device_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_all_user_assets_by_device_id_with_http_info(device_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_all_user_assets_by_device_id_with_http_info(self, device_id : StrictStr, **kwargs) -> ApiResponse:  # noqa: E501
        """get_all_user_assets_by_device_id  # noqa: E501

        Get all asset of a device that are in the database, ID only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_user_assets_by_device_id_with_http_info(device_id, async_req=True)
        >>> result = thread.get()

        :param device_id: (required)
        :type device_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'device_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_user_assets_by_device_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['device_id']:
            _path_params['deviceId'] = _params['device_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[str]",
        }

        return self.api_client.call_api(
            '/asset/device/{deviceId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_asset_by_id(self, id : StrictStr, key : Optional[StrictStr] = None, **kwargs) -> AssetResponseDto:  # noqa: E501
        """(Deprecated) get_asset_by_id  # noqa: E501

        Get a single asset's information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_by_id(id, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_asset_by_id_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_asset_by_id_with_http_info(id, key, **kwargs)  # noqa: E501

    @validate_arguments
    def get_asset_by_id_with_http_info(self, id : StrictStr, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) get_asset_by_id  # noqa: E501

        Get a single asset's information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_by_id_with_http_info(id, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /asset/assetById/{id} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'id',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_by_id" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "AssetResponseDto",
        }

        return self.api_client.call_api(
            '/asset/assetById/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_asset_info(self, id : StrictStr, key : Optional[StrictStr] = None, **kwargs) -> AssetResponseDto:  # noqa: E501
        """get_asset_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_info(id, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_asset_info_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_asset_info_with_http_info(id, key, **kwargs)  # noqa: E501

    @validate_arguments
    def get_asset_info_with_http_info(self, id : StrictStr, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_asset_info  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_info_with_http_info(id, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_info" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "AssetResponseDto",
        }

        return self.api_client.call_api(
            '/asset/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_asset_search_terms(self, **kwargs) -> List[str]:  # noqa: E501
        """get_asset_search_terms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_search_terms(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_asset_search_terms_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_asset_search_terms_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_asset_search_terms_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """get_asset_search_terms  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_search_terms_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_search_terms" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[str]",
        }

        return self.api_client.call_api(
            '/asset/search-terms', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_asset_statistics(self, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_trashed : Optional[StrictBool] = None, **kwargs) -> AssetStatsResponseDto:  # noqa: E501
        """get_asset_statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_statistics(is_archived, is_favorite, is_trashed, async_req=True)
        >>> result = thread.get()

        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetStatsResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_asset_statistics_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_asset_statistics_with_http_info(is_archived, is_favorite, is_trashed, **kwargs)  # noqa: E501

    @validate_arguments
    def get_asset_statistics_with_http_info(self, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_trashed : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_asset_statistics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_statistics_with_http_info(is_archived, is_favorite, is_trashed, async_req=True)
        >>> result = thread.get()

        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetStatsResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'is_archived',
            'is_favorite',
            'is_trashed'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_statistics" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        if _params.get('is_trashed') is not None:  # noqa: E501
            _query_params.append(('isTrashed', _params['is_trashed']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "AssetStatsResponseDto",
        }

        return self.api_client.call_api(
            '/asset/statistics', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_asset_thumbnail(self, id : StrictStr, format : Optional[ThumbnailFormat] = None, key : Optional[StrictStr] = None, **kwargs) -> bytearray:  # noqa: E501
        """get_asset_thumbnail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_thumbnail(id, format, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param format:
        :type format: ThumbnailFormat
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_asset_thumbnail_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_asset_thumbnail_with_http_info(id, format, key, **kwargs)  # noqa: E501

    @validate_arguments
    def get_asset_thumbnail_with_http_info(self, id : StrictStr, format : Optional[ThumbnailFormat] = None, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_asset_thumbnail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_thumbnail_with_http_info(id, format, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param format:
        :type format: ThumbnailFormat
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'format',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_thumbnail" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('format') is not None:  # noqa: E501
            _query_params.append(('format', _params['format'].value))

        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/asset/thumbnail/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_curated_locations(self, **kwargs) -> List[CuratedLocationsResponseDto]:  # noqa: E501
        """get_curated_locations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_curated_locations(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CuratedLocationsResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_curated_locations_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_curated_locations_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_curated_locations_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """get_curated_locations  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_curated_locations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CuratedLocationsResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_curated_locations" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[CuratedLocationsResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/curated-locations', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_curated_objects(self, **kwargs) -> List[CuratedObjectsResponseDto]:  # noqa: E501
        """get_curated_objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_curated_objects(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[CuratedObjectsResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_curated_objects_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_curated_objects_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_curated_objects_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """get_curated_objects  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_curated_objects_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[CuratedObjectsResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_curated_objects" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[CuratedObjectsResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/curated-objects', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_download_info_old(self, download_info_dto : DownloadInfoDto, key : Optional[StrictStr] = None, **kwargs) -> DownloadResponseDto:  # noqa: E501
        """get_download_info_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_info_old(download_info_dto, key, async_req=True)
        >>> result = thread.get()

        :param download_info_dto: (required)
        :type download_info_dto: DownloadInfoDto
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DownloadResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_download_info_old_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_download_info_old_with_http_info(download_info_dto, key, **kwargs)  # noqa: E501

    @validate_arguments
    def get_download_info_old_with_http_info(self, download_info_dto : DownloadInfoDto, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_download_info_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_download_info_old_with_http_info(download_info_dto, key, async_req=True)
        >>> result = thread.get()

        :param download_info_dto: (required)
        :type download_info_dto: DownloadInfoDto
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DownloadResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'download_info_dto',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_download_info_old" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['download_info_dto'] is not None:
            _body_params = _params['download_info_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '201': "DownloadResponseDto",
        }

        return self.api_client.call_api(
            '/asset/download/info', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_map_markers(self, file_created_after : Optional[datetime] = None, file_created_before : Optional[datetime] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, **kwargs) -> List[MapMarkerResponseDto]:  # noqa: E501
        """get_map_markers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_map_markers(file_created_after, file_created_before, is_archived, is_favorite, async_req=True)
        >>> result = thread.get()

        :param file_created_after:
        :type file_created_after: datetime
        :param file_created_before:
        :type file_created_before: datetime
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[MapMarkerResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_map_markers_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_map_markers_with_http_info(file_created_after, file_created_before, is_archived, is_favorite, **kwargs)  # noqa: E501

    @validate_arguments
    def get_map_markers_with_http_info(self, file_created_after : Optional[datetime] = None, file_created_before : Optional[datetime] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_map_markers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_map_markers_with_http_info(file_created_after, file_created_before, is_archived, is_favorite, async_req=True)
        >>> result = thread.get()

        :param file_created_after:
        :type file_created_after: datetime
        :param file_created_before:
        :type file_created_before: datetime
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[MapMarkerResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'file_created_after',
            'file_created_before',
            'is_archived',
            'is_favorite'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_map_markers" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('file_created_after') is not None:  # noqa: E501
            if isinstance(_params['file_created_after'], datetime):
                _query_params.append(('fileCreatedAfter', _params['file_created_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('fileCreatedAfter', _params['file_created_after']))

        if _params.get('file_created_before') is not None:  # noqa: E501
            if isinstance(_params['file_created_before'], datetime):
                _query_params.append(('fileCreatedBefore', _params['file_created_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('fileCreatedBefore', _params['file_created_before']))

        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[MapMarkerResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/map-marker', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_memory_lane(self, day : StrictInt, month : StrictInt, **kwargs) -> List[MemoryLaneResponseDto]:  # noqa: E501
        """get_memory_lane  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_memory_lane(day, month, async_req=True)
        >>> result = thread.get()

        :param day: (required)
        :type day: int
        :param month: (required)
        :type month: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[MemoryLaneResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_memory_lane_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_memory_lane_with_http_info(day, month, **kwargs)  # noqa: E501

    @validate_arguments
    def get_memory_lane_with_http_info(self, day : StrictInt, month : StrictInt, **kwargs) -> ApiResponse:  # noqa: E501
        """get_memory_lane  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_memory_lane_with_http_info(day, month, async_req=True)
        >>> result = thread.get()

        :param day: (required)
        :type day: int
        :param month: (required)
        :type month: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[MemoryLaneResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'day',
            'month'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_memory_lane" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('day') is not None:  # noqa: E501
            _query_params.append(('day', _params['day']))

        if _params.get('month') is not None:  # noqa: E501
            _query_params.append(('month', _params['month']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[MemoryLaneResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/memory-lane', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_random(self, count : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> List[AssetResponseDto]:  # noqa: E501
        """get_random  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_random(count, async_req=True)
        >>> result = thread.get()

        :param count:
        :type count: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AssetResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_random_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_random_with_http_info(count, **kwargs)  # noqa: E501

    @validate_arguments
    def get_random_with_http_info(self, count : Optional[Union[StrictFloat, StrictInt]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_random  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_random_with_http_info(count, async_req=True)
        >>> result = thread.get()

        :param count:
        :type count: float
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AssetResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'count'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_random" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('count') is not None:  # noqa: E501
            _query_params.append(('count', _params['count']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[AssetResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/random', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_time_bucket(self, size : TimeBucketSize, time_bucket : StrictStr, album_id : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_trashed : Optional[StrictBool] = None, key : Optional[StrictStr] = None, person_id : Optional[StrictStr] = None, user_id : Optional[StrictStr] = None, with_partners : Optional[StrictBool] = None, with_stacked : Optional[StrictBool] = None, **kwargs) -> List[AssetResponseDto]:  # noqa: E501
        """get_time_bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_time_bucket(size, time_bucket, album_id, is_archived, is_favorite, is_trashed, key, person_id, user_id, with_partners, with_stacked, async_req=True)
        >>> result = thread.get()

        :param size: (required)
        :type size: TimeBucketSize
        :param time_bucket: (required)
        :type time_bucket: str
        :param album_id:
        :type album_id: str
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param person_id:
        :type person_id: str
        :param user_id:
        :type user_id: str
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AssetResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_time_bucket_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_time_bucket_with_http_info(size, time_bucket, album_id, is_archived, is_favorite, is_trashed, key, person_id, user_id, with_partners, with_stacked, **kwargs)  # noqa: E501

    @validate_arguments
    def get_time_bucket_with_http_info(self, size : TimeBucketSize, time_bucket : StrictStr, album_id : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_trashed : Optional[StrictBool] = None, key : Optional[StrictStr] = None, person_id : Optional[StrictStr] = None, user_id : Optional[StrictStr] = None, with_partners : Optional[StrictBool] = None, with_stacked : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_time_bucket  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_time_bucket_with_http_info(size, time_bucket, album_id, is_archived, is_favorite, is_trashed, key, person_id, user_id, with_partners, with_stacked, async_req=True)
        >>> result = thread.get()

        :param size: (required)
        :type size: TimeBucketSize
        :param time_bucket: (required)
        :type time_bucket: str
        :param album_id:
        :type album_id: str
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param person_id:
        :type person_id: str
        :param user_id:
        :type user_id: str
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AssetResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'size',
            'time_bucket',
            'album_id',
            'is_archived',
            'is_favorite',
            'is_trashed',
            'key',
            'person_id',
            'user_id',
            'with_partners',
            'with_stacked'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_bucket" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('album_id') is not None:  # noqa: E501
            _query_params.append(('albumId', _params['album_id']))

        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        if _params.get('is_trashed') is not None:  # noqa: E501
            _query_params.append(('isTrashed', _params['is_trashed']))

        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        if _params.get('person_id') is not None:  # noqa: E501
            _query_params.append(('personId', _params['person_id']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size'].value))

        if _params.get('time_bucket') is not None:  # noqa: E501
            _query_params.append(('timeBucket', _params['time_bucket']))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        if _params.get('with_partners') is not None:  # noqa: E501
            _query_params.append(('withPartners', _params['with_partners']))

        if _params.get('with_stacked') is not None:  # noqa: E501
            _query_params.append(('withStacked', _params['with_stacked']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[AssetResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/time-bucket', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_time_buckets(self, size : TimeBucketSize, album_id : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_trashed : Optional[StrictBool] = None, key : Optional[StrictStr] = None, person_id : Optional[StrictStr] = None, user_id : Optional[StrictStr] = None, with_partners : Optional[StrictBool] = None, with_stacked : Optional[StrictBool] = None, **kwargs) -> List[TimeBucketResponseDto]:  # noqa: E501
        """get_time_buckets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_time_buckets(size, album_id, is_archived, is_favorite, is_trashed, key, person_id, user_id, with_partners, with_stacked, async_req=True)
        >>> result = thread.get()

        :param size: (required)
        :type size: TimeBucketSize
        :param album_id:
        :type album_id: str
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param person_id:
        :type person_id: str
        :param user_id:
        :type user_id: str
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[TimeBucketResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_time_buckets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_time_buckets_with_http_info(size, album_id, is_archived, is_favorite, is_trashed, key, person_id, user_id, with_partners, with_stacked, **kwargs)  # noqa: E501

    @validate_arguments
    def get_time_buckets_with_http_info(self, size : TimeBucketSize, album_id : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_trashed : Optional[StrictBool] = None, key : Optional[StrictStr] = None, person_id : Optional[StrictStr] = None, user_id : Optional[StrictStr] = None, with_partners : Optional[StrictBool] = None, with_stacked : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """get_time_buckets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_time_buckets_with_http_info(size, album_id, is_archived, is_favorite, is_trashed, key, person_id, user_id, with_partners, with_stacked, async_req=True)
        >>> result = thread.get()

        :param size: (required)
        :type size: TimeBucketSize
        :param album_id:
        :type album_id: str
        :param is_archived:
        :type is_archived: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_trashed:
        :type is_trashed: bool
        :param key:
        :type key: str
        :param person_id:
        :type person_id: str
        :param user_id:
        :type user_id: str
        :param with_partners:
        :type with_partners: bool
        :param with_stacked:
        :type with_stacked: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[TimeBucketResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'size',
            'album_id',
            'is_archived',
            'is_favorite',
            'is_trashed',
            'key',
            'person_id',
            'user_id',
            'with_partners',
            'with_stacked'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_time_buckets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('album_id') is not None:  # noqa: E501
            _query_params.append(('albumId', _params['album_id']))

        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        if _params.get('is_trashed') is not None:  # noqa: E501
            _query_params.append(('isTrashed', _params['is_trashed']))

        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        if _params.get('person_id') is not None:  # noqa: E501
            _query_params.append(('personId', _params['person_id']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size'].value))

        if _params.get('user_id') is not None:  # noqa: E501
            _query_params.append(('userId', _params['user_id']))

        if _params.get('with_partners') is not None:  # noqa: E501
            _query_params.append(('withPartners', _params['with_partners']))

        if _params.get('with_stacked') is not None:  # noqa: E501
            _query_params.append(('withStacked', _params['with_stacked']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[TimeBucketResponseDto]",
        }

        return self.api_client.call_api(
            '/asset/time-buckets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def restore_assets_old(self, bulk_ids_dto : BulkIdsDto, **kwargs) -> None:  # noqa: E501
        """restore_assets_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_assets_old(bulk_ids_dto, async_req=True)
        >>> result = thread.get()

        :param bulk_ids_dto: (required)
        :type bulk_ids_dto: BulkIdsDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the restore_assets_old_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.restore_assets_old_with_http_info(bulk_ids_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def restore_assets_old_with_http_info(self, bulk_ids_dto : BulkIdsDto, **kwargs) -> ApiResponse:  # noqa: E501
        """restore_assets_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_assets_old_with_http_info(bulk_ids_dto, async_req=True)
        >>> result = thread.get()

        :param bulk_ids_dto: (required)
        :type bulk_ids_dto: BulkIdsDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'bulk_ids_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_assets_old" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['bulk_ids_dto'] is not None:
            _body_params = _params['bulk_ids_dto']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset/restore', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def restore_trash_old(self, **kwargs) -> None:  # noqa: E501
        """restore_trash_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_trash_old(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the restore_trash_old_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.restore_trash_old_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def restore_trash_old_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """restore_trash_old  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.restore_trash_old_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method restore_trash_old" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset/trash/restore', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def run_asset_jobs(self, asset_jobs_dto : AssetJobsDto, **kwargs) -> None:  # noqa: E501
        """run_asset_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_asset_jobs(asset_jobs_dto, async_req=True)
        >>> result = thread.get()

        :param asset_jobs_dto: (required)
        :type asset_jobs_dto: AssetJobsDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the run_asset_jobs_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.run_asset_jobs_with_http_info(asset_jobs_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def run_asset_jobs_with_http_info(self, asset_jobs_dto : AssetJobsDto, **kwargs) -> ApiResponse:  # noqa: E501
        """run_asset_jobs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.run_asset_jobs_with_http_info(asset_jobs_dto, async_req=True)
        >>> result = thread.get()

        :param asset_jobs_dto: (required)
        :type asset_jobs_dto: AssetJobsDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'asset_jobs_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method run_asset_jobs" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_jobs_dto'] is not None:
            _body_params = _params['asset_jobs_dto']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset/jobs', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def search_assets(self, checksum : Optional[StrictStr] = None, city : Optional[StrictStr] = None, country : Optional[StrictStr] = None, created_after : Optional[datetime] = None, created_before : Optional[datetime] = None, device_asset_id : Optional[StrictStr] = None, device_id : Optional[StrictStr] = None, encoded_video_path : Optional[StrictStr] = None, id : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_encoded : Optional[StrictBool] = None, is_external : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_motion : Optional[StrictBool] = None, is_offline : Optional[StrictBool] = None, is_read_only : Optional[StrictBool] = None, is_visible : Optional[StrictBool] = None, lens_model : Optional[StrictStr] = None, library_id : Optional[StrictStr] = None, make : Optional[StrictStr] = None, model : Optional[StrictStr] = None, order : Optional[AssetOrder] = None, original_file_name : Optional[StrictStr] = None, original_path : Optional[StrictStr] = None, page : Optional[Union[StrictFloat, StrictInt]] = None, resize_path : Optional[StrictStr] = None, size : Optional[Union[StrictFloat, StrictInt]] = None, state : Optional[StrictStr] = None, taken_after : Optional[datetime] = None, taken_before : Optional[datetime] = None, trashed_after : Optional[datetime] = None, trashed_before : Optional[datetime] = None, type : Optional[AssetTypeEnum] = None, updated_after : Optional[datetime] = None, updated_before : Optional[datetime] = None, webp_path : Optional[StrictStr] = None, with_deleted : Optional[StrictBool] = None, with_exif : Optional[StrictBool] = None, with_people : Optional[StrictBool] = None, with_stacked : Optional[StrictBool] = None, **kwargs) -> List[AssetResponseDto]:  # noqa: E501
        """search_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_assets(checksum, city, country, created_after, created_before, device_asset_id, device_id, encoded_video_path, id, is_archived, is_encoded, is_external, is_favorite, is_motion, is_offline, is_read_only, is_visible, lens_model, library_id, make, model, order, original_file_name, original_path, page, resize_path, size, state, taken_after, taken_before, trashed_after, trashed_before, type, updated_after, updated_before, webp_path, with_deleted, with_exif, with_people, with_stacked, async_req=True)
        >>> result = thread.get()

        :param checksum:
        :type checksum: str
        :param city:
        :type city: str
        :param country:
        :type country: str
        :param created_after:
        :type created_after: datetime
        :param created_before:
        :type created_before: datetime
        :param device_asset_id:
        :type device_asset_id: str
        :param device_id:
        :type device_id: str
        :param encoded_video_path:
        :type encoded_video_path: str
        :param id:
        :type id: str
        :param is_archived:
        :type is_archived: bool
        :param is_encoded:
        :type is_encoded: bool
        :param is_external:
        :type is_external: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_motion:
        :type is_motion: bool
        :param is_offline:
        :type is_offline: bool
        :param is_read_only:
        :type is_read_only: bool
        :param is_visible:
        :type is_visible: bool
        :param lens_model:
        :type lens_model: str
        :param library_id:
        :type library_id: str
        :param make:
        :type make: str
        :param model:
        :type model: str
        :param order:
        :type order: AssetOrder
        :param original_file_name:
        :type original_file_name: str
        :param original_path:
        :type original_path: str
        :param page:
        :type page: float
        :param resize_path:
        :type resize_path: str
        :param size:
        :type size: float
        :param state:
        :type state: str
        :param taken_after:
        :type taken_after: datetime
        :param taken_before:
        :type taken_before: datetime
        :param trashed_after:
        :type trashed_after: datetime
        :param trashed_before:
        :type trashed_before: datetime
        :param type:
        :type type: AssetTypeEnum
        :param updated_after:
        :type updated_after: datetime
        :param updated_before:
        :type updated_before: datetime
        :param webp_path:
        :type webp_path: str
        :param with_deleted:
        :type with_deleted: bool
        :param with_exif:
        :type with_exif: bool
        :param with_people:
        :type with_people: bool
        :param with_stacked:
        :type with_stacked: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[AssetResponseDto]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the search_assets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.search_assets_with_http_info(checksum, city, country, created_after, created_before, device_asset_id, device_id, encoded_video_path, id, is_archived, is_encoded, is_external, is_favorite, is_motion, is_offline, is_read_only, is_visible, lens_model, library_id, make, model, order, original_file_name, original_path, page, resize_path, size, state, taken_after, taken_before, trashed_after, trashed_before, type, updated_after, updated_before, webp_path, with_deleted, with_exif, with_people, with_stacked, **kwargs)  # noqa: E501

    @validate_arguments
    def search_assets_with_http_info(self, checksum : Optional[StrictStr] = None, city : Optional[StrictStr] = None, country : Optional[StrictStr] = None, created_after : Optional[datetime] = None, created_before : Optional[datetime] = None, device_asset_id : Optional[StrictStr] = None, device_id : Optional[StrictStr] = None, encoded_video_path : Optional[StrictStr] = None, id : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_encoded : Optional[StrictBool] = None, is_external : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_motion : Optional[StrictBool] = None, is_offline : Optional[StrictBool] = None, is_read_only : Optional[StrictBool] = None, is_visible : Optional[StrictBool] = None, lens_model : Optional[StrictStr] = None, library_id : Optional[StrictStr] = None, make : Optional[StrictStr] = None, model : Optional[StrictStr] = None, order : Optional[AssetOrder] = None, original_file_name : Optional[StrictStr] = None, original_path : Optional[StrictStr] = None, page : Optional[Union[StrictFloat, StrictInt]] = None, resize_path : Optional[StrictStr] = None, size : Optional[Union[StrictFloat, StrictInt]] = None, state : Optional[StrictStr] = None, taken_after : Optional[datetime] = None, taken_before : Optional[datetime] = None, trashed_after : Optional[datetime] = None, trashed_before : Optional[datetime] = None, type : Optional[AssetTypeEnum] = None, updated_after : Optional[datetime] = None, updated_before : Optional[datetime] = None, webp_path : Optional[StrictStr] = None, with_deleted : Optional[StrictBool] = None, with_exif : Optional[StrictBool] = None, with_people : Optional[StrictBool] = None, with_stacked : Optional[StrictBool] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """search_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_assets_with_http_info(checksum, city, country, created_after, created_before, device_asset_id, device_id, encoded_video_path, id, is_archived, is_encoded, is_external, is_favorite, is_motion, is_offline, is_read_only, is_visible, lens_model, library_id, make, model, order, original_file_name, original_path, page, resize_path, size, state, taken_after, taken_before, trashed_after, trashed_before, type, updated_after, updated_before, webp_path, with_deleted, with_exif, with_people, with_stacked, async_req=True)
        >>> result = thread.get()

        :param checksum:
        :type checksum: str
        :param city:
        :type city: str
        :param country:
        :type country: str
        :param created_after:
        :type created_after: datetime
        :param created_before:
        :type created_before: datetime
        :param device_asset_id:
        :type device_asset_id: str
        :param device_id:
        :type device_id: str
        :param encoded_video_path:
        :type encoded_video_path: str
        :param id:
        :type id: str
        :param is_archived:
        :type is_archived: bool
        :param is_encoded:
        :type is_encoded: bool
        :param is_external:
        :type is_external: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_motion:
        :type is_motion: bool
        :param is_offline:
        :type is_offline: bool
        :param is_read_only:
        :type is_read_only: bool
        :param is_visible:
        :type is_visible: bool
        :param lens_model:
        :type lens_model: str
        :param library_id:
        :type library_id: str
        :param make:
        :type make: str
        :param model:
        :type model: str
        :param order:
        :type order: AssetOrder
        :param original_file_name:
        :type original_file_name: str
        :param original_path:
        :type original_path: str
        :param page:
        :type page: float
        :param resize_path:
        :type resize_path: str
        :param size:
        :type size: float
        :param state:
        :type state: str
        :param taken_after:
        :type taken_after: datetime
        :param taken_before:
        :type taken_before: datetime
        :param trashed_after:
        :type trashed_after: datetime
        :param trashed_before:
        :type trashed_before: datetime
        :param type:
        :type type: AssetTypeEnum
        :param updated_after:
        :type updated_after: datetime
        :param updated_before:
        :type updated_before: datetime
        :param webp_path:
        :type webp_path: str
        :param with_deleted:
        :type with_deleted: bool
        :param with_exif:
        :type with_exif: bool
        :param with_people:
        :type with_people: bool
        :param with_stacked:
        :type with_stacked: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[AssetResponseDto], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'checksum',
            'city',
            'country',
            'created_after',
            'created_before',
            'device_asset_id',
            'device_id',
            'encoded_video_path',
            'id',
            'is_archived',
            'is_encoded',
            'is_external',
            'is_favorite',
            'is_motion',
            'is_offline',
            'is_read_only',
            'is_visible',
            'lens_model',
            'library_id',
            'make',
            'model',
            'order',
            'original_file_name',
            'original_path',
            'page',
            'resize_path',
            'size',
            'state',
            'taken_after',
            'taken_before',
            'trashed_after',
            'trashed_before',
            'type',
            'updated_after',
            'updated_before',
            'webp_path',
            'with_deleted',
            'with_exif',
            'with_people',
            'with_stacked'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_assets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('checksum') is not None:  # noqa: E501
            _query_params.append(('checksum', _params['checksum']))

        if _params.get('city') is not None:  # noqa: E501
            _query_params.append(('city', _params['city']))

        if _params.get('country') is not None:  # noqa: E501
            _query_params.append(('country', _params['country']))

        if _params.get('created_after') is not None:  # noqa: E501
            if isinstance(_params['created_after'], datetime):
                _query_params.append(('createdAfter', _params['created_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('createdAfter', _params['created_after']))

        if _params.get('created_before') is not None:  # noqa: E501
            if isinstance(_params['created_before'], datetime):
                _query_params.append(('createdBefore', _params['created_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('createdBefore', _params['created_before']))

        if _params.get('device_asset_id') is not None:  # noqa: E501
            _query_params.append(('deviceAssetId', _params['device_asset_id']))

        if _params.get('device_id') is not None:  # noqa: E501
            _query_params.append(('deviceId', _params['device_id']))

        if _params.get('encoded_video_path') is not None:  # noqa: E501
            _query_params.append(('encodedVideoPath', _params['encoded_video_path']))

        if _params.get('id') is not None:  # noqa: E501
            _query_params.append(('id', _params['id']))

        if _params.get('is_archived') is not None:  # noqa: E501
            _query_params.append(('isArchived', _params['is_archived']))

        if _params.get('is_encoded') is not None:  # noqa: E501
            _query_params.append(('isEncoded', _params['is_encoded']))

        if _params.get('is_external') is not None:  # noqa: E501
            _query_params.append(('isExternal', _params['is_external']))

        if _params.get('is_favorite') is not None:  # noqa: E501
            _query_params.append(('isFavorite', _params['is_favorite']))

        if _params.get('is_motion') is not None:  # noqa: E501
            _query_params.append(('isMotion', _params['is_motion']))

        if _params.get('is_offline') is not None:  # noqa: E501
            _query_params.append(('isOffline', _params['is_offline']))

        if _params.get('is_read_only') is not None:  # noqa: E501
            _query_params.append(('isReadOnly', _params['is_read_only']))

        if _params.get('is_visible') is not None:  # noqa: E501
            _query_params.append(('isVisible', _params['is_visible']))

        if _params.get('lens_model') is not None:  # noqa: E501
            _query_params.append(('lensModel', _params['lens_model']))

        if _params.get('library_id') is not None:  # noqa: E501
            _query_params.append(('libraryId', _params['library_id']))

        if _params.get('make') is not None:  # noqa: E501
            _query_params.append(('make', _params['make']))

        if _params.get('model') is not None:  # noqa: E501
            _query_params.append(('model', _params['model']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order'].value))

        if _params.get('original_file_name') is not None:  # noqa: E501
            _query_params.append(('originalFileName', _params['original_file_name']))

        if _params.get('original_path') is not None:  # noqa: E501
            _query_params.append(('originalPath', _params['original_path']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('resize_path') is not None:  # noqa: E501
            _query_params.append(('resizePath', _params['resize_path']))

        if _params.get('size') is not None:  # noqa: E501
            _query_params.append(('size', _params['size']))

        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state']))

        if _params.get('taken_after') is not None:  # noqa: E501
            if isinstance(_params['taken_after'], datetime):
                _query_params.append(('takenAfter', _params['taken_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('takenAfter', _params['taken_after']))

        if _params.get('taken_before') is not None:  # noqa: E501
            if isinstance(_params['taken_before'], datetime):
                _query_params.append(('takenBefore', _params['taken_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('takenBefore', _params['taken_before']))

        if _params.get('trashed_after') is not None:  # noqa: E501
            if isinstance(_params['trashed_after'], datetime):
                _query_params.append(('trashedAfter', _params['trashed_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('trashedAfter', _params['trashed_after']))

        if _params.get('trashed_before') is not None:  # noqa: E501
            if isinstance(_params['trashed_before'], datetime):
                _query_params.append(('trashedBefore', _params['trashed_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('trashedBefore', _params['trashed_before']))

        if _params.get('type') is not None:  # noqa: E501
            _query_params.append(('type', _params['type'].value))

        if _params.get('updated_after') is not None:  # noqa: E501
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(('updatedAfter', _params['updated_after'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updatedAfter', _params['updated_after']))

        if _params.get('updated_before') is not None:  # noqa: E501
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(('updatedBefore', _params['updated_before'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('updatedBefore', _params['updated_before']))

        if _params.get('webp_path') is not None:  # noqa: E501
            _query_params.append(('webpPath', _params['webp_path']))

        if _params.get('with_deleted') is not None:  # noqa: E501
            _query_params.append(('withDeleted', _params['with_deleted']))

        if _params.get('with_exif') is not None:  # noqa: E501
            _query_params.append(('withExif', _params['with_exif']))

        if _params.get('with_people') is not None:  # noqa: E501
            _query_params.append(('withPeople', _params['with_people']))

        if _params.get('with_stacked') is not None:  # noqa: E501
            _query_params.append(('withStacked', _params['with_stacked']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "List[AssetResponseDto]",
        }

        return self.api_client.call_api(
            '/assets', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def serve_file(self, id : StrictStr, is_thumb : Optional[StrictBool] = None, is_web : Optional[StrictBool] = None, key : Optional[StrictStr] = None, **kwargs) -> bytearray:  # noqa: E501
        """serve_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.serve_file(id, is_thumb, is_web, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param is_thumb:
        :type is_thumb: bool
        :param is_web:
        :type is_web: bool
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: bytearray
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the serve_file_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.serve_file_with_http_info(id, is_thumb, is_web, key, **kwargs)  # noqa: E501

    @validate_arguments
    def serve_file_with_http_info(self, id : StrictStr, is_thumb : Optional[StrictBool] = None, is_web : Optional[StrictBool] = None, key : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """serve_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.serve_file_with_http_info(id, is_thumb, is_web, key, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param is_thumb:
        :type is_thumb: bool
        :param is_web:
        :type is_web: bool
        :param key:
        :type key: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(bytearray, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'is_thumb',
            'is_web',
            'key'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method serve_file" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        if _params.get('is_thumb') is not None:  # noqa: E501
            _query_params.append(('isThumb', _params['is_thumb']))

        if _params.get('is_web') is not None:  # noqa: E501
            _query_params.append(('isWeb', _params['is_web']))

        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "bytearray",
        }

        return self.api_client.call_api(
            '/asset/file/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_asset(self, id : StrictStr, update_asset_dto : UpdateAssetDto, **kwargs) -> AssetResponseDto:  # noqa: E501
        """update_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_asset(id, update_asset_dto, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param update_asset_dto: (required)
        :type update_asset_dto: UpdateAssetDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_asset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_asset_with_http_info(id, update_asset_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def update_asset_with_http_info(self, id : StrictStr, update_asset_dto : UpdateAssetDto, **kwargs) -> ApiResponse:  # noqa: E501
        """update_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_asset_with_http_info(id, update_asset_dto, async_req=True)
        >>> result = thread.get()

        :param id: (required)
        :type id: str
        :param update_asset_dto: (required)
        :type update_asset_dto: UpdateAssetDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'update_asset_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_asset_dto'] is not None:
            _body_params = _params['update_asset_dto']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '200': "AssetResponseDto",
        }

        return self.api_client.call_api(
            '/asset/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_assets(self, asset_bulk_update_dto : AssetBulkUpdateDto, **kwargs) -> None:  # noqa: E501
        """update_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_assets(asset_bulk_update_dto, async_req=True)
        >>> result = thread.get()

        :param asset_bulk_update_dto: (required)
        :type asset_bulk_update_dto: AssetBulkUpdateDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_assets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_assets_with_http_info(asset_bulk_update_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def update_assets_with_http_info(self, asset_bulk_update_dto : AssetBulkUpdateDto, **kwargs) -> ApiResponse:  # noqa: E501
        """update_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_assets_with_http_info(asset_bulk_update_dto, async_req=True)
        >>> result = thread.get()

        :param asset_bulk_update_dto: (required)
        :type asset_bulk_update_dto: AssetBulkUpdateDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'asset_bulk_update_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_assets" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['asset_bulk_update_dto'] is not None:
            _body_params = _params['asset_bulk_update_dto']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_stack_parent(self, update_stack_parent_dto : UpdateStackParentDto, **kwargs) -> None:  # noqa: E501
        """update_stack_parent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_stack_parent(update_stack_parent_dto, async_req=True)
        >>> result = thread.get()

        :param update_stack_parent_dto: (required)
        :type update_stack_parent_dto: UpdateStackParentDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_stack_parent_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_stack_parent_with_http_info(update_stack_parent_dto, **kwargs)  # noqa: E501

    @validate_arguments
    def update_stack_parent_with_http_info(self, update_stack_parent_dto : UpdateStackParentDto, **kwargs) -> ApiResponse:  # noqa: E501
        """update_stack_parent  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_stack_parent_with_http_info(update_stack_parent_dto, async_req=True)
        >>> result = thread.get()

        :param update_stack_parent_dto: (required)
        :type update_stack_parent_dto: UpdateStackParentDto
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'update_stack_parent_dto'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_stack_parent" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['update_stack_parent_dto'] is not None:
            _body_params = _params['update_stack_parent_dto']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/asset/stack/parent', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def upload_file(self, asset_data : Union[StrictBytes, StrictStr], device_asset_id : StrictStr, device_id : StrictStr, file_created_at : datetime, file_modified_at : datetime, key : Optional[StrictStr] = None, duration : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_external : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_offline : Optional[StrictBool] = None, is_read_only : Optional[StrictBool] = None, is_visible : Optional[StrictBool] = None, library_id : Optional[StrictStr] = None, live_photo_data : Optional[Union[StrictBytes, StrictStr]] = None, sidecar_data : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> AssetFileUploadResponseDto:  # noqa: E501
        """upload_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file(asset_data, device_asset_id, device_id, file_created_at, file_modified_at, key, duration, is_archived, is_external, is_favorite, is_offline, is_read_only, is_visible, library_id, live_photo_data, sidecar_data, async_req=True)
        >>> result = thread.get()

        :param asset_data: (required)
        :type asset_data: bytearray
        :param device_asset_id: (required)
        :type device_asset_id: str
        :param device_id: (required)
        :type device_id: str
        :param file_created_at: (required)
        :type file_created_at: datetime
        :param file_modified_at: (required)
        :type file_modified_at: datetime
        :param key:
        :type key: str
        :param duration:
        :type duration: str
        :param is_archived:
        :type is_archived: bool
        :param is_external:
        :type is_external: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_offline:
        :type is_offline: bool
        :param is_read_only:
        :type is_read_only: bool
        :param is_visible:
        :type is_visible: bool
        :param library_id:
        :type library_id: str
        :param live_photo_data:
        :type live_photo_data: bytearray
        :param sidecar_data:
        :type sidecar_data: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssetFileUploadResponseDto
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the upload_file_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.upload_file_with_http_info(asset_data, device_asset_id, device_id, file_created_at, file_modified_at, key, duration, is_archived, is_external, is_favorite, is_offline, is_read_only, is_visible, library_id, live_photo_data, sidecar_data, **kwargs)  # noqa: E501

    @validate_arguments
    def upload_file_with_http_info(self, asset_data : Union[StrictBytes, StrictStr], device_asset_id : StrictStr, device_id : StrictStr, file_created_at : datetime, file_modified_at : datetime, key : Optional[StrictStr] = None, duration : Optional[StrictStr] = None, is_archived : Optional[StrictBool] = None, is_external : Optional[StrictBool] = None, is_favorite : Optional[StrictBool] = None, is_offline : Optional[StrictBool] = None, is_read_only : Optional[StrictBool] = None, is_visible : Optional[StrictBool] = None, library_id : Optional[StrictStr] = None, live_photo_data : Optional[Union[StrictBytes, StrictStr]] = None, sidecar_data : Optional[Union[StrictBytes, StrictStr]] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """upload_file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_file_with_http_info(asset_data, device_asset_id, device_id, file_created_at, file_modified_at, key, duration, is_archived, is_external, is_favorite, is_offline, is_read_only, is_visible, library_id, live_photo_data, sidecar_data, async_req=True)
        >>> result = thread.get()

        :param asset_data: (required)
        :type asset_data: bytearray
        :param device_asset_id: (required)
        :type device_asset_id: str
        :param device_id: (required)
        :type device_id: str
        :param file_created_at: (required)
        :type file_created_at: datetime
        :param file_modified_at: (required)
        :type file_modified_at: datetime
        :param key:
        :type key: str
        :param duration:
        :type duration: str
        :param is_archived:
        :type is_archived: bool
        :param is_external:
        :type is_external: bool
        :param is_favorite:
        :type is_favorite: bool
        :param is_offline:
        :type is_offline: bool
        :param is_read_only:
        :type is_read_only: bool
        :param is_visible:
        :type is_visible: bool
        :param library_id:
        :type library_id: str
        :param live_photo_data:
        :type live_photo_data: bytearray
        :param sidecar_data:
        :type sidecar_data: bytearray
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssetFileUploadResponseDto, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'asset_data',
            'device_asset_id',
            'device_id',
            'file_created_at',
            'file_modified_at',
            'key',
            'duration',
            'is_archived',
            'is_external',
            'is_favorite',
            'is_offline',
            'is_read_only',
            'is_visible',
            'library_id',
            'live_photo_data',
            'sidecar_data'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('key') is not None:  # noqa: E501
            _query_params.append(('key', _params['key']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['asset_data']:
            _files['assetData'] = _params['asset_data']

        if _params['device_asset_id']:
            _form_params.append(('deviceAssetId', _params['device_asset_id']))

        if _params['device_id']:
            _form_params.append(('deviceId', _params['device_id']))

        if _params['duration']:
            _form_params.append(('duration', _params['duration']))

        if _params['file_created_at']:
            _form_params.append(('fileCreatedAt', _params['file_created_at']))

        if _params['file_modified_at']:
            _form_params.append(('fileModifiedAt', _params['file_modified_at']))

        if _params['is_archived']:
            _form_params.append(('isArchived', _params['is_archived']))

        if _params['is_external']:
            _form_params.append(('isExternal', _params['is_external']))

        if _params['is_favorite']:
            _form_params.append(('isFavorite', _params['is_favorite']))

        if _params['is_offline']:
            _form_params.append(('isOffline', _params['is_offline']))

        if _params['is_read_only']:
            _form_params.append(('isReadOnly', _params['is_read_only']))

        if _params['is_visible']:
            _form_params.append(('isVisible', _params['is_visible']))

        if _params['library_id']:
            _form_params.append(('libraryId', _params['library_id']))

        if _params['live_photo_data']:
            _files['livePhotoData'] = _params['live_photo_data']

        if _params['sidecar_data']:
            _files['sidecarData'] = _params['sidecar_data']

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['cookie', 'api_key', 'bearer']  # noqa: E501

        _response_types_map = {
            '201': "AssetFileUploadResponseDto",
        }

        return self.api_client.call_api(
            '/asset/upload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
