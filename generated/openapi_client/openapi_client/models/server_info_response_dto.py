# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ServerInfoResponseDto(BaseModel):
    """
    ServerInfoResponseDto
    """
    disk_available: StrictStr = Field(..., alias="diskAvailable")
    disk_available_raw: StrictInt = Field(..., alias="diskAvailableRaw")
    disk_size: StrictStr = Field(..., alias="diskSize")
    disk_size_raw: StrictInt = Field(..., alias="diskSizeRaw")
    disk_usage_percentage: Union[StrictFloat, StrictInt] = Field(..., alias="diskUsagePercentage")
    disk_use: StrictStr = Field(..., alias="diskUse")
    disk_use_raw: StrictInt = Field(..., alias="diskUseRaw")
    __properties = ["diskAvailable", "diskAvailableRaw", "diskSize", "diskSizeRaw", "diskUsagePercentage", "diskUse", "diskUseRaw"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServerInfoResponseDto:
        """Create an instance of ServerInfoResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServerInfoResponseDto:
        """Create an instance of ServerInfoResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServerInfoResponseDto.parse_obj(obj)

        _obj = ServerInfoResponseDto.parse_obj({
            "disk_available": obj.get("diskAvailable"),
            "disk_available_raw": obj.get("diskAvailableRaw"),
            "disk_size": obj.get("diskSize"),
            "disk_size_raw": obj.get("diskSizeRaw"),
            "disk_usage_percentage": obj.get("diskUsagePercentage"),
            "disk_use": obj.get("diskUse"),
            "disk_use_raw": obj.get("diskUseRaw")
        })
        return _obj


