# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.library_type import LibraryType

class LibraryResponseDto(BaseModel):
    """
    LibraryResponseDto
    """
    asset_count: StrictInt = Field(..., alias="assetCount")
    created_at: datetime = Field(..., alias="createdAt")
    exclusion_patterns: conlist(StrictStr) = Field(..., alias="exclusionPatterns")
    id: StrictStr = Field(...)
    import_paths: conlist(StrictStr) = Field(..., alias="importPaths")
    name: StrictStr = Field(...)
    owner_id: StrictStr = Field(..., alias="ownerId")
    refreshed_at: Optional[datetime] = Field(..., alias="refreshedAt")
    type: LibraryType = Field(...)
    updated_at: datetime = Field(..., alias="updatedAt")
    __properties = ["assetCount", "createdAt", "exclusionPatterns", "id", "importPaths", "name", "ownerId", "refreshedAt", "type", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LibraryResponseDto:
        """Create an instance of LibraryResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if refreshed_at (nullable) is None
        # and __fields_set__ contains the field
        if self.refreshed_at is None and "refreshed_at" in self.__fields_set__:
            _dict['refreshedAt'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LibraryResponseDto:
        """Create an instance of LibraryResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LibraryResponseDto.parse_obj(obj)

        _obj = LibraryResponseDto.parse_obj({
            "asset_count": obj.get("assetCount"),
            "created_at": obj.get("createdAt"),
            "exclusion_patterns": obj.get("exclusionPatterns"),
            "id": obj.get("id"),
            "import_paths": obj.get("importPaths"),
            "name": obj.get("name"),
            "owner_id": obj.get("ownerId"),
            "refreshed_at": obj.get("refreshedAt"),
            "type": obj.get("type"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


