# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictInt, conlist
from openapi_client.models.usage_by_user_dto import UsageByUserDto

class ServerStatsResponseDto(BaseModel):
    """
    ServerStatsResponseDto
    """
    photos: StrictInt = Field(...)
    usage: StrictInt = Field(...)
    usage_by_user: conlist(UsageByUserDto) = Field(..., alias="usageByUser")
    videos: StrictInt = Field(...)
    __properties = ["photos", "usage", "usageByUser", "videos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServerStatsResponseDto:
        """Create an instance of ServerStatsResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in usage_by_user (list)
        _items = []
        if self.usage_by_user:
            for _item in self.usage_by_user:
                if _item:
                    _items.append(_item.to_dict())
            _dict['usageByUser'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServerStatsResponseDto:
        """Create an instance of ServerStatsResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServerStatsResponseDto.parse_obj(obj)

        _obj = ServerStatsResponseDto.parse_obj({
            "photos": obj.get("photos") if obj.get("photos") is not None else 0,
            "usage": obj.get("usage") if obj.get("usage") is not None else 0,
            "usage_by_user": [UsageByUserDto.from_dict(_item) for _item in obj.get("usageByUser")] if obj.get("usageByUser") is not None else None,
            "videos": obj.get("videos") if obj.get("videos") is not None else 0
        })
        return _obj


