# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.system_config_library_scan_dto import SystemConfigLibraryScanDto
from openapi_client.models.system_config_library_watch_dto import SystemConfigLibraryWatchDto

class SystemConfigLibraryDto(BaseModel):
    """
    SystemConfigLibraryDto
    """
    scan: SystemConfigLibraryScanDto = Field(...)
    watch: SystemConfigLibraryWatchDto = Field(...)
    __properties = ["scan", "watch"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SystemConfigLibraryDto:
        """Create an instance of SystemConfigLibraryDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of scan
        if self.scan:
            _dict['scan'] = self.scan.to_dict()
        # override the default output from pydantic by calling `to_dict()` of watch
        if self.watch:
            _dict['watch'] = self.watch.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SystemConfigLibraryDto:
        """Create an instance of SystemConfigLibraryDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SystemConfigLibraryDto.parse_obj(obj)

        _obj = SystemConfigLibraryDto.parse_obj({
            "scan": SystemConfigLibraryScanDto.from_dict(obj.get("scan")) if obj.get("scan") is not None else None,
            "watch": SystemConfigLibraryWatchDto.from_dict(obj.get("watch")) if obj.get("watch") is not None else None
        })
        return _obj


