# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapi_client.models.user_avatar_color import UserAvatarColor

class UpdateUserDto(BaseModel):
    """
    UpdateUserDto
    """
    avatar_color: Optional[UserAvatarColor] = Field(None, alias="avatarColor")
    email: Optional[StrictStr] = None
    external_path: Optional[StrictStr] = Field(None, alias="externalPath")
    id: StrictStr = Field(...)
    is_admin: Optional[StrictBool] = Field(None, alias="isAdmin")
    memories_enabled: Optional[StrictBool] = Field(None, alias="memoriesEnabled")
    name: Optional[StrictStr] = None
    password: Optional[StrictStr] = None
    quota_size_in_bytes: Optional[StrictInt] = Field(None, alias="quotaSizeInBytes")
    should_change_password: Optional[StrictBool] = Field(None, alias="shouldChangePassword")
    storage_label: Optional[StrictStr] = Field(None, alias="storageLabel")
    __properties = ["avatarColor", "email", "externalPath", "id", "isAdmin", "memoriesEnabled", "name", "password", "quotaSizeInBytes", "shouldChangePassword", "storageLabel"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateUserDto:
        """Create an instance of UpdateUserDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if quota_size_in_bytes (nullable) is None
        # and __fields_set__ contains the field
        if self.quota_size_in_bytes is None and "quota_size_in_bytes" in self.__fields_set__:
            _dict['quotaSizeInBytes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateUserDto:
        """Create an instance of UpdateUserDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateUserDto.parse_obj(obj)

        _obj = UpdateUserDto.parse_obj({
            "avatar_color": obj.get("avatarColor"),
            "email": obj.get("email"),
            "external_path": obj.get("externalPath"),
            "id": obj.get("id"),
            "is_admin": obj.get("isAdmin"),
            "memories_enabled": obj.get("memoriesEnabled"),
            "name": obj.get("name"),
            "password": obj.get("password"),
            "quota_size_in_bytes": obj.get("quotaSizeInBytes"),
            "should_change_password": obj.get("shouldChangePassword"),
            "storage_label": obj.get("storageLabel")
        })
        return _obj


