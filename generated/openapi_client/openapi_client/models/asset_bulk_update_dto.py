# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist

class AssetBulkUpdateDto(BaseModel):
    """
    AssetBulkUpdateDto
    """
    date_time_original: Optional[StrictStr] = Field(None, alias="dateTimeOriginal")
    ids: conlist(StrictStr) = Field(...)
    is_archived: Optional[StrictBool] = Field(None, alias="isArchived")
    is_favorite: Optional[StrictBool] = Field(None, alias="isFavorite")
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    remove_parent: Optional[StrictBool] = Field(None, alias="removeParent")
    stack_parent_id: Optional[StrictStr] = Field(None, alias="stackParentId")
    __properties = ["dateTimeOriginal", "ids", "isArchived", "isFavorite", "latitude", "longitude", "removeParent", "stackParentId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetBulkUpdateDto:
        """Create an instance of AssetBulkUpdateDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetBulkUpdateDto:
        """Create an instance of AssetBulkUpdateDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AssetBulkUpdateDto.parse_obj(obj)

        _obj = AssetBulkUpdateDto.parse_obj({
            "date_time_original": obj.get("dateTimeOriginal"),
            "ids": obj.get("ids"),
            "is_archived": obj.get("isArchived"),
            "is_favorite": obj.get("isFavorite"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "remove_parent": obj.get("removeParent"),
            "stack_parent_id": obj.get("stackParentId")
        })
        return _obj


