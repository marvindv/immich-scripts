# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from openapi_client.models.user_avatar_color import UserAvatarColor

class PartnerResponseDto(BaseModel):
    """
    PartnerResponseDto
    """
    avatar_color: UserAvatarColor = Field(..., alias="avatarColor")
    created_at: datetime = Field(..., alias="createdAt")
    deleted_at: Optional[datetime] = Field(..., alias="deletedAt")
    email: StrictStr = Field(...)
    external_path: Optional[StrictStr] = Field(..., alias="externalPath")
    id: StrictStr = Field(...)
    in_timeline: Optional[StrictBool] = Field(None, alias="inTimeline")
    is_admin: StrictBool = Field(..., alias="isAdmin")
    memories_enabled: Optional[StrictBool] = Field(None, alias="memoriesEnabled")
    name: StrictStr = Field(...)
    oauth_id: StrictStr = Field(..., alias="oauthId")
    profile_image_path: StrictStr = Field(..., alias="profileImagePath")
    quota_size_in_bytes: Optional[StrictInt] = Field(..., alias="quotaSizeInBytes")
    quota_usage_in_bytes: Optional[StrictInt] = Field(..., alias="quotaUsageInBytes")
    should_change_password: StrictBool = Field(..., alias="shouldChangePassword")
    storage_label: Optional[StrictStr] = Field(..., alias="storageLabel")
    updated_at: datetime = Field(..., alias="updatedAt")
    __properties = ["avatarColor", "createdAt", "deletedAt", "email", "externalPath", "id", "inTimeline", "isAdmin", "memoriesEnabled", "name", "oauthId", "profileImagePath", "quotaSizeInBytes", "quotaUsageInBytes", "shouldChangePassword", "storageLabel", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PartnerResponseDto:
        """Create an instance of PartnerResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if deleted_at (nullable) is None
        # and __fields_set__ contains the field
        if self.deleted_at is None and "deleted_at" in self.__fields_set__:
            _dict['deletedAt'] = None

        # set to None if external_path (nullable) is None
        # and __fields_set__ contains the field
        if self.external_path is None and "external_path" in self.__fields_set__:
            _dict['externalPath'] = None

        # set to None if quota_size_in_bytes (nullable) is None
        # and __fields_set__ contains the field
        if self.quota_size_in_bytes is None and "quota_size_in_bytes" in self.__fields_set__:
            _dict['quotaSizeInBytes'] = None

        # set to None if quota_usage_in_bytes (nullable) is None
        # and __fields_set__ contains the field
        if self.quota_usage_in_bytes is None and "quota_usage_in_bytes" in self.__fields_set__:
            _dict['quotaUsageInBytes'] = None

        # set to None if storage_label (nullable) is None
        # and __fields_set__ contains the field
        if self.storage_label is None and "storage_label" in self.__fields_set__:
            _dict['storageLabel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PartnerResponseDto:
        """Create an instance of PartnerResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PartnerResponseDto.parse_obj(obj)

        _obj = PartnerResponseDto.parse_obj({
            "avatar_color": obj.get("avatarColor"),
            "created_at": obj.get("createdAt"),
            "deleted_at": obj.get("deletedAt"),
            "email": obj.get("email"),
            "external_path": obj.get("externalPath"),
            "id": obj.get("id"),
            "in_timeline": obj.get("inTimeline"),
            "is_admin": obj.get("isAdmin"),
            "memories_enabled": obj.get("memoriesEnabled"),
            "name": obj.get("name"),
            "oauth_id": obj.get("oauthId"),
            "profile_image_path": obj.get("profileImagePath"),
            "quota_size_in_bytes": obj.get("quotaSizeInBytes"),
            "quota_usage_in_bytes": obj.get("quotaUsageInBytes"),
            "should_change_password": obj.get("shouldChangePassword"),
            "storage_label": obj.get("storageLabel"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


