# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from openapi_client.models.path_entity_type import PathEntityType
from openapi_client.models.path_type import PathType

class FileReportItemDto(BaseModel):
    """
    FileReportItemDto
    """
    checksum: Optional[StrictStr] = None
    entity_id: StrictStr = Field(..., alias="entityId")
    entity_type: PathEntityType = Field(..., alias="entityType")
    path_type: PathType = Field(..., alias="pathType")
    path_value: StrictStr = Field(..., alias="pathValue")
    __properties = ["checksum", "entityId", "entityType", "pathType", "pathValue"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FileReportItemDto:
        """Create an instance of FileReportItemDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FileReportItemDto:
        """Create an instance of FileReportItemDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileReportItemDto.parse_obj(obj)

        _obj = FileReportItemDto.parse_obj({
            "checksum": obj.get("checksum"),
            "entity_id": obj.get("entityId"),
            "entity_type": obj.get("entityType"),
            "path_type": obj.get("pathType"),
            "path_value": obj.get("pathValue")
        })
        return _obj


