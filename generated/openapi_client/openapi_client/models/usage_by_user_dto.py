# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class UsageByUserDto(BaseModel):
    """
    UsageByUserDto
    """
    photos: StrictInt = Field(...)
    quota_size_in_bytes: Optional[StrictInt] = Field(..., alias="quotaSizeInBytes")
    usage: StrictInt = Field(...)
    user_id: StrictStr = Field(..., alias="userId")
    user_name: StrictStr = Field(..., alias="userName")
    videos: StrictInt = Field(...)
    __properties = ["photos", "quotaSizeInBytes", "usage", "userId", "userName", "videos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UsageByUserDto:
        """Create an instance of UsageByUserDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if quota_size_in_bytes (nullable) is None
        # and __fields_set__ contains the field
        if self.quota_size_in_bytes is None and "quota_size_in_bytes" in self.__fields_set__:
            _dict['quotaSizeInBytes'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UsageByUserDto:
        """Create an instance of UsageByUserDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UsageByUserDto.parse_obj(obj)

        _obj = UsageByUserDto.parse_obj({
            "photos": obj.get("photos"),
            "quota_size_in_bytes": obj.get("quotaSizeInBytes"),
            "usage": obj.get("usage"),
            "user_id": obj.get("userId"),
            "user_name": obj.get("userName"),
            "videos": obj.get("videos")
        })
        return _obj


