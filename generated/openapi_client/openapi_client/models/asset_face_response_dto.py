# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.person_response_dto import PersonResponseDto

class AssetFaceResponseDto(BaseModel):
    """
    AssetFaceResponseDto
    """
    bounding_box_x1: StrictInt = Field(..., alias="boundingBoxX1")
    bounding_box_x2: StrictInt = Field(..., alias="boundingBoxX2")
    bounding_box_y1: StrictInt = Field(..., alias="boundingBoxY1")
    bounding_box_y2: StrictInt = Field(..., alias="boundingBoxY2")
    id: StrictStr = Field(...)
    image_height: StrictInt = Field(..., alias="imageHeight")
    image_width: StrictInt = Field(..., alias="imageWidth")
    person: Optional[PersonResponseDto] = Field(...)
    __properties = ["boundingBoxX1", "boundingBoxX2", "boundingBoxY1", "boundingBoxY2", "id", "imageHeight", "imageWidth", "person"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AssetFaceResponseDto:
        """Create an instance of AssetFaceResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of person
        if self.person:
            _dict['person'] = self.person.to_dict()
        # set to None if person (nullable) is None
        # and __fields_set__ contains the field
        if self.person is None and "person" in self.__fields_set__:
            _dict['person'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AssetFaceResponseDto:
        """Create an instance of AssetFaceResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AssetFaceResponseDto.parse_obj(obj)

        _obj = AssetFaceResponseDto.parse_obj({
            "bounding_box_x1": obj.get("boundingBoxX1"),
            "bounding_box_x2": obj.get("boundingBoxX2"),
            "bounding_box_y1": obj.get("boundingBoxY1"),
            "bounding_box_y2": obj.get("boundingBoxY2"),
            "id": obj.get("id"),
            "image_height": obj.get("imageHeight"),
            "image_width": obj.get("imageWidth"),
            "person": PersonResponseDto.from_dict(obj.get("person")) if obj.get("person") is not None else None
        })
        return _obj


