# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.79.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr

class ImportAssetDto(BaseModel):
    """
    ImportAssetDto
    """
    asset_path: StrictStr = Field(..., alias="assetPath")
    device_asset_id: StrictStr = Field(..., alias="deviceAssetId")
    device_id: StrictStr = Field(..., alias="deviceId")
    duration: Optional[StrictStr] = None
    file_created_at: datetime = Field(..., alias="fileCreatedAt")
    file_modified_at: datetime = Field(..., alias="fileModifiedAt")
    is_archived: Optional[StrictBool] = Field(None, alias="isArchived")
    is_external: Optional[StrictBool] = Field(None, alias="isExternal")
    is_favorite: StrictBool = Field(..., alias="isFavorite")
    is_offline: Optional[StrictBool] = Field(None, alias="isOffline")
    is_read_only: Optional[StrictBool] = Field(True, alias="isReadOnly")
    is_visible: Optional[StrictBool] = Field(None, alias="isVisible")
    library_id: Optional[StrictStr] = Field(None, alias="libraryId")
    sidecar_path: Optional[StrictStr] = Field(None, alias="sidecarPath")
    __properties = ["assetPath", "deviceAssetId", "deviceId", "duration", "fileCreatedAt", "fileModifiedAt", "isArchived", "isExternal", "isFavorite", "isOffline", "isReadOnly", "isVisible", "libraryId", "sidecarPath"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ImportAssetDto:
        """Create an instance of ImportAssetDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ImportAssetDto:
        """Create an instance of ImportAssetDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ImportAssetDto.parse_obj(obj)

        _obj = ImportAssetDto.parse_obj({
            "asset_path": obj.get("assetPath"),
            "device_asset_id": obj.get("deviceAssetId"),
            "device_id": obj.get("deviceId"),
            "duration": obj.get("duration"),
            "file_created_at": obj.get("fileCreatedAt"),
            "file_modified_at": obj.get("fileModifiedAt"),
            "is_archived": obj.get("isArchived"),
            "is_external": obj.get("isExternal"),
            "is_favorite": obj.get("isFavorite"),
            "is_offline": obj.get("isOffline"),
            "is_read_only": obj.get("isReadOnly") if obj.get("isReadOnly") is not None else True,
            "is_visible": obj.get("isVisible"),
            "library_id": obj.get("libraryId"),
            "sidecar_path": obj.get("sidecarPath")
        })
        return _obj


