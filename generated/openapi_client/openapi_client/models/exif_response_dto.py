# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class ExifResponseDto(BaseModel):
    """
    ExifResponseDto
    """
    city: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    date_time_original: Optional[datetime] = Field(None, alias="dateTimeOriginal")
    description: Optional[StrictStr] = None
    exif_image_height: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exifImageHeight")
    exif_image_width: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="exifImageWidth")
    exposure_time: Optional[StrictStr] = Field(None, alias="exposureTime")
    f_number: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="fNumber")
    file_size_in_byte: Optional[StrictInt] = Field(None, alias="fileSizeInByte")
    focal_length: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="focalLength")
    iso: Optional[Union[StrictFloat, StrictInt]] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    lens_model: Optional[StrictStr] = Field(None, alias="lensModel")
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    make: Optional[StrictStr] = None
    model: Optional[StrictStr] = None
    modify_date: Optional[datetime] = Field(None, alias="modifyDate")
    orientation: Optional[StrictStr] = None
    projection_type: Optional[StrictStr] = Field(None, alias="projectionType")
    state: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = Field(None, alias="timeZone")
    __properties = ["city", "country", "dateTimeOriginal", "description", "exifImageHeight", "exifImageWidth", "exposureTime", "fNumber", "fileSizeInByte", "focalLength", "iso", "latitude", "lensModel", "longitude", "make", "model", "modifyDate", "orientation", "projectionType", "state", "timeZone"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExifResponseDto:
        """Create an instance of ExifResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if city (nullable) is None
        # and __fields_set__ contains the field
        if self.city is None and "city" in self.__fields_set__:
            _dict['city'] = None

        # set to None if country (nullable) is None
        # and __fields_set__ contains the field
        if self.country is None and "country" in self.__fields_set__:
            _dict['country'] = None

        # set to None if date_time_original (nullable) is None
        # and __fields_set__ contains the field
        if self.date_time_original is None and "date_time_original" in self.__fields_set__:
            _dict['dateTimeOriginal'] = None

        # set to None if description (nullable) is None
        # and __fields_set__ contains the field
        if self.description is None and "description" in self.__fields_set__:
            _dict['description'] = None

        # set to None if exif_image_height (nullable) is None
        # and __fields_set__ contains the field
        if self.exif_image_height is None and "exif_image_height" in self.__fields_set__:
            _dict['exifImageHeight'] = None

        # set to None if exif_image_width (nullable) is None
        # and __fields_set__ contains the field
        if self.exif_image_width is None and "exif_image_width" in self.__fields_set__:
            _dict['exifImageWidth'] = None

        # set to None if exposure_time (nullable) is None
        # and __fields_set__ contains the field
        if self.exposure_time is None and "exposure_time" in self.__fields_set__:
            _dict['exposureTime'] = None

        # set to None if f_number (nullable) is None
        # and __fields_set__ contains the field
        if self.f_number is None and "f_number" in self.__fields_set__:
            _dict['fNumber'] = None

        # set to None if file_size_in_byte (nullable) is None
        # and __fields_set__ contains the field
        if self.file_size_in_byte is None and "file_size_in_byte" in self.__fields_set__:
            _dict['fileSizeInByte'] = None

        # set to None if focal_length (nullable) is None
        # and __fields_set__ contains the field
        if self.focal_length is None and "focal_length" in self.__fields_set__:
            _dict['focalLength'] = None

        # set to None if iso (nullable) is None
        # and __fields_set__ contains the field
        if self.iso is None and "iso" in self.__fields_set__:
            _dict['iso'] = None

        # set to None if latitude (nullable) is None
        # and __fields_set__ contains the field
        if self.latitude is None and "latitude" in self.__fields_set__:
            _dict['latitude'] = None

        # set to None if lens_model (nullable) is None
        # and __fields_set__ contains the field
        if self.lens_model is None and "lens_model" in self.__fields_set__:
            _dict['lensModel'] = None

        # set to None if longitude (nullable) is None
        # and __fields_set__ contains the field
        if self.longitude is None and "longitude" in self.__fields_set__:
            _dict['longitude'] = None

        # set to None if make (nullable) is None
        # and __fields_set__ contains the field
        if self.make is None and "make" in self.__fields_set__:
            _dict['make'] = None

        # set to None if model (nullable) is None
        # and __fields_set__ contains the field
        if self.model is None and "model" in self.__fields_set__:
            _dict['model'] = None

        # set to None if modify_date (nullable) is None
        # and __fields_set__ contains the field
        if self.modify_date is None and "modify_date" in self.__fields_set__:
            _dict['modifyDate'] = None

        # set to None if orientation (nullable) is None
        # and __fields_set__ contains the field
        if self.orientation is None and "orientation" in self.__fields_set__:
            _dict['orientation'] = None

        # set to None if projection_type (nullable) is None
        # and __fields_set__ contains the field
        if self.projection_type is None and "projection_type" in self.__fields_set__:
            _dict['projectionType'] = None

        # set to None if state (nullable) is None
        # and __fields_set__ contains the field
        if self.state is None and "state" in self.__fields_set__:
            _dict['state'] = None

        # set to None if time_zone (nullable) is None
        # and __fields_set__ contains the field
        if self.time_zone is None and "time_zone" in self.__fields_set__:
            _dict['timeZone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExifResponseDto:
        """Create an instance of ExifResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExifResponseDto.parse_obj(obj)

        _obj = ExifResponseDto.parse_obj({
            "city": obj.get("city"),
            "country": obj.get("country"),
            "date_time_original": obj.get("dateTimeOriginal"),
            "description": obj.get("description"),
            "exif_image_height": obj.get("exifImageHeight"),
            "exif_image_width": obj.get("exifImageWidth"),
            "exposure_time": obj.get("exposureTime"),
            "f_number": obj.get("fNumber"),
            "file_size_in_byte": obj.get("fileSizeInByte"),
            "focal_length": obj.get("focalLength"),
            "iso": obj.get("iso"),
            "latitude": obj.get("latitude"),
            "lens_model": obj.get("lensModel"),
            "longitude": obj.get("longitude"),
            "make": obj.get("make"),
            "model": obj.get("model"),
            "modify_date": obj.get("modifyDate"),
            "orientation": obj.get("orientation"),
            "projection_type": obj.get("projectionType"),
            "state": obj.get("state"),
            "time_zone": obj.get("timeZone")
        })
        return _obj


