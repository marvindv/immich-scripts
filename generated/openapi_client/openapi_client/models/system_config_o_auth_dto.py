# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictStr

class SystemConfigOAuthDto(BaseModel):
    """
    SystemConfigOAuthDto
    """
    auto_launch: StrictBool = Field(..., alias="autoLaunch")
    auto_register: StrictBool = Field(..., alias="autoRegister")
    button_text: StrictStr = Field(..., alias="buttonText")
    client_id: StrictStr = Field(..., alias="clientId")
    client_secret: StrictStr = Field(..., alias="clientSecret")
    enabled: StrictBool = Field(...)
    issuer_url: StrictStr = Field(..., alias="issuerUrl")
    mobile_override_enabled: StrictBool = Field(..., alias="mobileOverrideEnabled")
    mobile_redirect_uri: StrictStr = Field(..., alias="mobileRedirectUri")
    scope: StrictStr = Field(...)
    signing_algorithm: StrictStr = Field(..., alias="signingAlgorithm")
    storage_label_claim: StrictStr = Field(..., alias="storageLabelClaim")
    __properties = ["autoLaunch", "autoRegister", "buttonText", "clientId", "clientSecret", "enabled", "issuerUrl", "mobileOverrideEnabled", "mobileRedirectUri", "scope", "signingAlgorithm", "storageLabelClaim"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SystemConfigOAuthDto:
        """Create an instance of SystemConfigOAuthDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SystemConfigOAuthDto:
        """Create an instance of SystemConfigOAuthDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SystemConfigOAuthDto.parse_obj(obj)

        _obj = SystemConfigOAuthDto.parse_obj({
            "auto_launch": obj.get("autoLaunch"),
            "auto_register": obj.get("autoRegister"),
            "button_text": obj.get("buttonText"),
            "client_id": obj.get("clientId"),
            "client_secret": obj.get("clientSecret"),
            "enabled": obj.get("enabled"),
            "issuer_url": obj.get("issuerUrl"),
            "mobile_override_enabled": obj.get("mobileOverrideEnabled"),
            "mobile_redirect_uri": obj.get("mobileRedirectUri"),
            "scope": obj.get("scope"),
            "signing_algorithm": obj.get("signingAlgorithm"),
            "storage_label_claim": obj.get("storageLabelClaim")
        })
        return _obj


