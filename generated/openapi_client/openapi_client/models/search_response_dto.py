# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from openapi_client.models.search_album_response_dto import SearchAlbumResponseDto
from openapi_client.models.search_asset_response_dto import SearchAssetResponseDto

class SearchResponseDto(BaseModel):
    """
    SearchResponseDto
    """
    albums: SearchAlbumResponseDto = Field(...)
    assets: SearchAssetResponseDto = Field(...)
    __properties = ["albums", "assets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SearchResponseDto:
        """Create an instance of SearchResponseDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of albums
        if self.albums:
            _dict['albums'] = self.albums.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assets
        if self.assets:
            _dict['assets'] = self.assets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SearchResponseDto:
        """Create an instance of SearchResponseDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SearchResponseDto.parse_obj(obj)

        _obj = SearchResponseDto.parse_obj({
            "albums": SearchAlbumResponseDto.from_dict(obj.get("albums")) if obj.get("albums") is not None else None,
            "assets": SearchAssetResponseDto.from_dict(obj.get("assets")) if obj.get("assets") is not None else None
        })
        return _obj


