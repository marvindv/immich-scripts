# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool

class ServerFeaturesDto(BaseModel):
    """
    ServerFeaturesDto
    """
    config_file: StrictBool = Field(..., alias="configFile")
    facial_recognition: StrictBool = Field(..., alias="facialRecognition")
    map: StrictBool = Field(...)
    oauth: StrictBool = Field(...)
    oauth_auto_launch: StrictBool = Field(..., alias="oauthAutoLaunch")
    password_login: StrictBool = Field(..., alias="passwordLogin")
    reverse_geocoding: StrictBool = Field(..., alias="reverseGeocoding")
    search: StrictBool = Field(...)
    sidecar: StrictBool = Field(...)
    smart_search: StrictBool = Field(..., alias="smartSearch")
    trash: StrictBool = Field(...)
    __properties = ["configFile", "facialRecognition", "map", "oauth", "oauthAutoLaunch", "passwordLogin", "reverseGeocoding", "search", "sidecar", "smartSearch", "trash"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServerFeaturesDto:
        """Create an instance of ServerFeaturesDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServerFeaturesDto:
        """Create an instance of ServerFeaturesDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServerFeaturesDto.parse_obj(obj)

        _obj = ServerFeaturesDto.parse_obj({
            "config_file": obj.get("configFile"),
            "facial_recognition": obj.get("facialRecognition"),
            "map": obj.get("map"),
            "oauth": obj.get("oauth"),
            "oauth_auto_launch": obj.get("oauthAutoLaunch"),
            "password_login": obj.get("passwordLogin"),
            "reverse_geocoding": obj.get("reverseGeocoding"),
            "search": obj.get("search"),
            "sidecar": obj.get("sidecar"),
            "smart_search": obj.get("smartSearch"),
            "trash": obj.get("trash")
        })
        return _obj


