# coding: utf-8

"""
    Immich

    Immich API

    The version of the OpenAPI document: 1.94.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist

class SystemConfigTemplateStorageOptionDto(BaseModel):
    """
    SystemConfigTemplateStorageOptionDto
    """
    day_options: conlist(StrictStr) = Field(..., alias="dayOptions")
    hour_options: conlist(StrictStr) = Field(..., alias="hourOptions")
    minute_options: conlist(StrictStr) = Field(..., alias="minuteOptions")
    month_options: conlist(StrictStr) = Field(..., alias="monthOptions")
    preset_options: conlist(StrictStr) = Field(..., alias="presetOptions")
    second_options: conlist(StrictStr) = Field(..., alias="secondOptions")
    week_options: conlist(StrictStr) = Field(..., alias="weekOptions")
    year_options: conlist(StrictStr) = Field(..., alias="yearOptions")
    __properties = ["dayOptions", "hourOptions", "minuteOptions", "monthOptions", "presetOptions", "secondOptions", "weekOptions", "yearOptions"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SystemConfigTemplateStorageOptionDto:
        """Create an instance of SystemConfigTemplateStorageOptionDto from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SystemConfigTemplateStorageOptionDto:
        """Create an instance of SystemConfigTemplateStorageOptionDto from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SystemConfigTemplateStorageOptionDto.parse_obj(obj)

        _obj = SystemConfigTemplateStorageOptionDto.parse_obj({
            "day_options": obj.get("dayOptions"),
            "hour_options": obj.get("hourOptions"),
            "minute_options": obj.get("minuteOptions"),
            "month_options": obj.get("monthOptions"),
            "preset_options": obj.get("presetOptions"),
            "second_options": obj.get("secondOptions"),
            "week_options": obj.get("weekOptions"),
            "year_options": obj.get("yearOptions")
        })
        return _obj


